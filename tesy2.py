import logging
import requests
from telegram import Update, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TELEGRAM_BOT_TOKEN = "7532015526:AAH6onVHZ7cBL6r13cyA95W0hgY1R4oECrI"
API_TOKEN = "4aba690793e7bfe87064b5f0474b9943ab429d77"

# –ù–∞—Å—Ç—Ä–æ–∏–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞ –ø–æ –≥–µ–æ-–∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞–º
def get_raw_air_quality_data_by_geo(latitude, longitude):
    url = f"https://api.waqi.info/feed/geo:{latitude};{longitude}/?token={API_TOKEN}"

    response = requests.get(url)

    if response.status_code == 200:
        return response.json()  # –í–µ—Ä–Ω–µ—Ç JSON —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
    else:
        return {"error": "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ"}


# –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
def format_air_quality_data(air_quality_data, city_name):
    if "error" in air_quality_data:
        return air_quality_data["error"]

    air_quality = air_quality_data["data"]

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    aqi = air_quality["aqi"]
    temperature = air_quality["iaqi"].get("t", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞
    humidity = air_quality["iaqi"].get("h", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –í–ª–∞–∂–Ω–æ—Å—Ç—å
    wind_speed = air_quality["iaqi"].get("w", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞
    wind_gust = air_quality["iaqi"].get("wg", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –ü–æ—Ä—ã–≤—ã –≤–µ—Ç—Ä–∞
    pressure = air_quality["iaqi"].get("p", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # –î–∞–≤–ª–µ–Ω–∏–µ

    # –ó–∞–≥—Ä—è–∑–Ω—è—é—â–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞
    pm25 = air_quality["iaqi"].get("pm25", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # PM2.5
    co = air_quality["iaqi"].get("co", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # CO
    no2 = air_quality["iaqi"].get("no2", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # NO2
    so2 = air_quality["iaqi"].get("so2", {}).get("v", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")  # SO2

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –æ—Ç—á–µ—Ç–∞
    return f"üåç –ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –≤ {city_name}\n" \
           f"üìÜ –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {air_quality.get('time', {}).get('s', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n\n" \
           f"üí® –û–±—â–∏–π –∏–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—è–∑–Ω–µ–Ω–∏—è (AQI): {aqi}\n" \
           f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temperature}¬∞C\n" \
           f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n" \
           f"üå¨ –°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å (–ø–æ—Ä—ã–≤—ã –¥–æ {wind_gust} –º/—Å)\n" \
           f"üõë –î–∞–≤–ª–µ–Ω–∏–µ: {pressure} hPa\n\n" \
           f"ü¶† –û—Å–Ω–æ–≤–Ω—ã–µ –∑–∞–≥—Ä—è–∑–Ω—è—é—â–∏–µ –≤–µ—â–µ—Å—Ç–≤–∞:\n" \
           f"- PM2.5 (–æ–ø–∞—Å–Ω–∞—è –ø—ã–ª—å): {pm25}\n" \
           f"- CO (—É–≥–∞—Ä–Ω—ã–π –≥–∞–∑): {co}\n" \
           f"- NO‚ÇÇ (–¥–∏–æ–∫—Å–∏–¥ –∞–∑–æ—Ç–∞): {no2}\n" \
           f"- SO‚ÇÇ (–¥–∏–æ–∫—Å–∏–¥ —Å–µ—Ä—ã): {so2}"


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext):
    print("–ö–æ–º–∞–Ω–¥–∞ /start –ø–æ–ª—É—á–µ–Ω–∞.")
    keyboard = [[KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)]]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞.",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏
async def location_handler(update: Update, context: CallbackContext):
    location = update.message.location
    if location:
        latitude = location.latitude
        longitude = location.longitude

        print(f"–ü–æ–ª—É—á–µ–Ω—ã –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã: –®–∏—Ä–æ—Ç–∞: {latitude}, –î–æ–ª–≥–æ—Ç–∞: {longitude}")

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
        raw_data = get_raw_air_quality_data_by_geo(latitude, longitude)
        air_quality_report = format_air_quality_data(raw_data, city_name="Almaty")  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –∏–º—è –≥–æ—Ä–æ–¥–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á–µ—Ç–∞ –æ –∫–∞—á–µ—Å—Ç–≤–µ –≤–æ–∑–¥—É—Ö–∞
        await update.message.reply_text(air_quality_report)
    else:
        await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ.")


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    """Start the bot."""
    application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()

    # –õ–æ–≥–∏—Ä—É–µ–º, –∫–æ–≥–¥–∞ –±–æ—Ç –∑–∞–ø—É—â–µ–Ω
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞—é —Å–æ–æ–±—â–µ–Ω–∏–π...")

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.LOCATION, location_handler))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling
    application.run_polling()

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    main()  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è asyncio